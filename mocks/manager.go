// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	go_fork_vnredis "go.fork.vn/redis"

	mock "github.com/stretchr/testify/mock"

	redis "github.com/redis/go-redis/v9"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// Client provides a mock function with no fields
func (_m *MockManager) Client() (*redis.Client, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Client")
	}

	var r0 *redis.Client
	var r1 error
	if rf, ok := ret.Get(0).(func() (*redis.Client, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *redis.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Client)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_Client_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Client'
type MockManager_Client_Call struct {
	*mock.Call
}

// Client is a helper method to define mock.On call
func (_e *MockManager_Expecter) Client() *MockManager_Client_Call {
	return &MockManager_Client_Call{Call: _e.mock.On("Client")}
}

func (_c *MockManager_Client_Call) Run(run func()) *MockManager_Client_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_Client_Call) Return(_a0 *redis.Client, _a1 error) *MockManager_Client_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_Client_Call) RunAndReturn(run func() (*redis.Client, error)) *MockManager_Client_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockManager) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockManager_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockManager_Expecter) Close() *MockManager_Close_Call {
	return &MockManager_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockManager_Close_Call) Run(run func()) *MockManager_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_Close_Call) Return(_a0 error) *MockManager_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Close_Call) RunAndReturn(run func() error) *MockManager_Close_Call {
	_c.Call.Return(run)
	return _c
}

// ClusterPing provides a mock function with given fields: ctx
func (_m *MockManager) ClusterPing(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClusterPing")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_ClusterPing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClusterPing'
type MockManager_ClusterPing_Call struct {
	*mock.Call
}

// ClusterPing is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManager_Expecter) ClusterPing(ctx interface{}) *MockManager_ClusterPing_Call {
	return &MockManager_ClusterPing_Call{Call: _e.mock.On("ClusterPing", ctx)}
}

func (_c *MockManager_ClusterPing_Call) Run(run func(ctx context.Context)) *MockManager_ClusterPing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockManager_ClusterPing_Call) Return(_a0 error) *MockManager_ClusterPing_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_ClusterPing_Call) RunAndReturn(run func(context.Context) error) *MockManager_ClusterPing_Call {
	_c.Call.Return(run)
	return _c
}

// GetConfig provides a mock function with no fields
func (_m *MockManager) GetConfig() *go_fork_vnredis.Config {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 *go_fork_vnredis.Config
	if rf, ok := ret.Get(0).(func() *go_fork_vnredis.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*go_fork_vnredis.Config)
		}
	}

	return r0
}

// MockManager_GetConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConfig'
type MockManager_GetConfig_Call struct {
	*mock.Call
}

// GetConfig is a helper method to define mock.On call
func (_e *MockManager_Expecter) GetConfig() *MockManager_GetConfig_Call {
	return &MockManager_GetConfig_Call{Call: _e.mock.On("GetConfig")}
}

func (_c *MockManager_GetConfig_Call) Run(run func()) *MockManager_GetConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_GetConfig_Call) Return(_a0 *go_fork_vnredis.Config) *MockManager_GetConfig_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_GetConfig_Call) RunAndReturn(run func() *go_fork_vnredis.Config) *MockManager_GetConfig_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *MockManager) Ping(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockManager_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManager_Expecter) Ping(ctx interface{}) *MockManager_Ping_Call {
	return &MockManager_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockManager_Ping_Call) Run(run func(ctx context.Context)) *MockManager_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockManager_Ping_Call) Return(_a0 error) *MockManager_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Ping_Call) RunAndReturn(run func(context.Context) error) *MockManager_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// UniversalClient provides a mock function with no fields
func (_m *MockManager) UniversalClient() (*redis.UniversalClient, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UniversalClient")
	}

	var r0 *redis.UniversalClient
	var r1 error
	if rf, ok := ret.Get(0).(func() (*redis.UniversalClient, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *redis.UniversalClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.UniversalClient)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_UniversalClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UniversalClient'
type MockManager_UniversalClient_Call struct {
	*mock.Call
}

// UniversalClient is a helper method to define mock.On call
func (_e *MockManager_Expecter) UniversalClient() *MockManager_UniversalClient_Call {
	return &MockManager_UniversalClient_Call{Call: _e.mock.On("UniversalClient")}
}

func (_c *MockManager_UniversalClient_Call) Run(run func()) *MockManager_UniversalClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_UniversalClient_Call) Return(_a0 *redis.UniversalClient, _a1 error) *MockManager_UniversalClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_UniversalClient_Call) RunAndReturn(run func() (*redis.UniversalClient, error)) *MockManager_UniversalClient_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
