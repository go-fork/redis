// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	redis "github.com/redis/go-redis/v9"
)

// MockManager is an autogenerated mock type for the Manager type
type MockManager struct {
	mock.Mock
}

type MockManager_Expecter struct {
	mock *mock.Mock
}

func (_m *MockManager) EXPECT() *MockManager_Expecter {
	return &MockManager_Expecter{mock: &_m.Mock}
}

// Client provides a mock function with no fields
func (_m *MockManager) Client() (*redis.Client, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Client")
	}

	var r0 *redis.Client
	var r1 error
	if rf, ok := ret.Get(0).(func() (*redis.Client, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *redis.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.Client)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_Client_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Client'
type MockManager_Client_Call struct {
	*mock.Call
}

// Client is a helper method to define mock.On call
func (_e *MockManager_Expecter) Client() *MockManager_Client_Call {
	return &MockManager_Client_Call{Call: _e.mock.On("Client")}
}

func (_c *MockManager_Client_Call) Run(run func()) *MockManager_Client_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_Client_Call) Return(_a0 *redis.Client, _a1 error) *MockManager_Client_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_Client_Call) RunAndReturn(run func() (*redis.Client, error)) *MockManager_Client_Call {
	_c.Call.Return(run)
	return _c
}

// ClientPing provides a mock function with given fields: ctx
func (_m *MockManager) ClientPing(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClientPing")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_ClientPing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientPing'
type MockManager_ClientPing_Call struct {
	*mock.Call
}

// ClientPing is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManager_Expecter) ClientPing(ctx interface{}) *MockManager_ClientPing_Call {
	return &MockManager_ClientPing_Call{Call: _e.mock.On("ClientPing", ctx)}
}

func (_c *MockManager_ClientPing_Call) Run(run func(ctx context.Context)) *MockManager_ClientPing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockManager_ClientPing_Call) Return(_a0 error) *MockManager_ClientPing_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_ClientPing_Call) RunAndReturn(run func(context.Context) error) *MockManager_ClientPing_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockManager) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockManager_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockManager_Expecter) Close() *MockManager_Close_Call {
	return &MockManager_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockManager_Close_Call) Run(run func()) *MockManager_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_Close_Call) Return(_a0 error) *MockManager_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_Close_Call) RunAndReturn(run func() error) *MockManager_Close_Call {
	_c.Call.Return(run)
	return _c
}

// UniversalClient provides a mock function with no fields
func (_m *MockManager) UniversalClient() (*redis.UniversalClient, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UniversalClient")
	}

	var r0 *redis.UniversalClient
	var r1 error
	if rf, ok := ret.Get(0).(func() (*redis.UniversalClient, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *redis.UniversalClient); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis.UniversalClient)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockManager_UniversalClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UniversalClient'
type MockManager_UniversalClient_Call struct {
	*mock.Call
}

// UniversalClient is a helper method to define mock.On call
func (_e *MockManager_Expecter) UniversalClient() *MockManager_UniversalClient_Call {
	return &MockManager_UniversalClient_Call{Call: _e.mock.On("UniversalClient")}
}

func (_c *MockManager_UniversalClient_Call) Run(run func()) *MockManager_UniversalClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockManager_UniversalClient_Call) Return(_a0 *redis.UniversalClient, _a1 error) *MockManager_UniversalClient_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockManager_UniversalClient_Call) RunAndReturn(run func() (*redis.UniversalClient, error)) *MockManager_UniversalClient_Call {
	_c.Call.Return(run)
	return _c
}

// UniversalPing provides a mock function with given fields: ctx
func (_m *MockManager) UniversalPing(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for UniversalPing")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockManager_UniversalPing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UniversalPing'
type MockManager_UniversalPing_Call struct {
	*mock.Call
}

// UniversalPing is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockManager_Expecter) UniversalPing(ctx interface{}) *MockManager_UniversalPing_Call {
	return &MockManager_UniversalPing_Call{Call: _e.mock.On("UniversalPing", ctx)}
}

func (_c *MockManager_UniversalPing_Call) Run(run func(ctx context.Context)) *MockManager_UniversalPing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockManager_UniversalPing_Call) Return(_a0 error) *MockManager_UniversalPing_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockManager_UniversalPing_Call) RunAndReturn(run func(context.Context) error) *MockManager_UniversalPing_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockManager creates a new instance of MockManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManager {
	mock := &MockManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
